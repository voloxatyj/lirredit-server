# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  errors: [FieldError!]
  success: Boolean!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input ChangePasswordInput {
  password: String!
  token: String!
}

input CommentInput {
  postId: Int!
  text: String!
}

type CommentObject {
  commentId: Int
  createdAt: DateTime!
  id: Int!
  images: [Image!]
  postId: Int!
  text: String!
  updatedAt: DateTime!
  userId: Int!
  users: User!
  views: BigInt!
}

type CommentResponse {
  comment: CommentObject!
  errors: [FieldError!]
  success: Boolean!
}

input CommentsInput {
  postId: Int!
}

type CommentsResponse {
  comments: [CommentObject!]!
  errors: [FieldError!]
  success: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FieldError {
  field: String!
  message: String!
}

input GetPostInput {
  postId: Int!
}

input GetPostsInput {
  cursor: Float!
  limit: Float!
  text: String
  title: String
}

type Image {
  createdAt: DateTime!
  id: Int!
  postId: Int!
  public_id: String!
  secure_url: String!
}

input ImageInput {
  public_id: String!
  secure_url: String!
}

input LikePostInput {
  isLike: Boolean!
  postId: Int!
}

type LikeResponse {
  errors: [FieldError!]
  message: String!
  success: Boolean!
}

input LoginInput {
  password: String!
  usernameOrEmail: String!
}

type Mutation {
  changePassword(credentials: ChangePasswordInput!): UserResponse!
  createComment(input: CommentInput!): CommentResponse!
  createPost(input: PostInput!): PostResponse!
  forgotPassword(email: String!): AuthResponse!
  like(input: LikePostInput!): LikeResponse!
  login(credentials: LoginInput!): UserResponse!
  logout: Boolean!
  removeUser(id: Int!): User!
  signUp(credentials: SignUpInput!): UserResponse!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Post {
  comments: [CommentObject!]!
  comments_count: String!
  createdAt: DateTime!
  id: Int!
  images: [Image!]
  likes_count: String!
  post_likes: [PostLikes!]!
  short_text: String!
  text: String!
  title: String!
  updatedAt: DateTime!
  userId: Float!
  users: User!
  views: BigInt!
}

input PostInput {
  images: [ImageInput!]
  text: String!
  title: String!
}

type PostLikes {
  createdAt: DateTime!
  postId: Int!
  userId: Int!
}

type PostResponse {
  errors: [FieldError!]
  isLike: Boolean!
  post: Post
}

type PostsResponse {
  errors: [FieldError!]
  isLikes: [Boolean!]!
  posts: [Post!]
}

type Query {
  findOne(email: String!): UserResponse!
  findUsers: [User!]!
  getComments(input: CommentsInput!): CommentsResponse!
  getPost(input: GetPostInput!): PostResponse
  getPosts(input: GetPostsInput!): PostsResponse!
  getUser: User
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
}

input UpdateUserInput {
  email: String
  id: Int!
  password: String
  username: String
}

type User {
  avatarName: String!
  createdAt: DateTime!
  email: String!
  id: Int!
  image: String
  short_username: String!
  updatedAt: DateTime!
  username: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}