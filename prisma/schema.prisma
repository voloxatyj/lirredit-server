generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @unique @default(autoincrement())
  username      String         @unique
  email         String         @unique
  password      String         @db.VarChar(255)
  image         String?        @db.VarChar(255)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  role          Role           @default(USER)
  token         String?        @unique
  posts         Post[]
  followedBy    Follows[]      @relation("following")
  following     Follows[]      @relation("follower")
  comments      Comments[]
  post_likes    PostLikes[]
  comment_likes CommentLikes[]

  @@map("users")
}

model Post {
  id         Int         @id @unique @default(autoincrement())
  users      User        @relation(fields: [userId], references: [id])
  title      String      @db.VarChar(255)
  views      BigInt      @db.BigInt()  @default(0)
  text       String      @db.VarChar(1500)
  userId     Int         @map("user_id")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @map("updated_at")
  images     Image[]
  comments   Comments[]
  post_likes PostLikes[]

  @@index([createdAt(sort: Desc)])
  @@map("posts")
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int
  status      Status   @default(WAITING)
  date        DateTime @default(now())

  @@id([followerId, followingId])
  @@map("follows")
}

model Image {
  id         Int      @id @unique @default(autoincrement())
  posts      Post     @relation(fields: [postId], references: [id])
  secure_url String   @db.VarChar()
  public_id  String   @db.VarChar()
  postId     Int      @map("post_id")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("pictures")
}

model Comments {
  id            Int            @id @unique @default(autoincrement())
  postId        Int            @map("post_id")
  posts         Post           @relation(fields: [postId], references: [id])
  userId        Int            @map("user_id")
  users         User           @relation(fields: [userId], references: [id])
  treads        Comments[]     @relation("treads")
  comments      Comments?      @relation("treads", fields: [commentId], references: [id])
  commentId     Int?           @map("comment_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  comment_likes CommentLikes[]

  @@map("comments")
}

model PostLikes {
  postId    Int      @map("post_id")
  posts     Post     @relation(fields: [postId], references: [id])
  userId    Int      @map("user_id")
  users     User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@id([postId, userId])
  @@map("post_likes")
}

model CommentLikes {
  userId    Int      @map("user_id")
  users     User     @relation(fields: [userId], references: [id])
  commentId Int      @map("comment_id")
  comments  Comments @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@id([commentId, userId])
  @@map("comment_likes")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Status {
  PENDING
  FULFILLED
  REJECTED
  WAITING
}
