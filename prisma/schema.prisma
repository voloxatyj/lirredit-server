generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @unique @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String   @db.VarChar(255)
  image     String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  role      Role     @default(USER)
  token     String?  @unique
  posts     Post[]
  updoots   Updoot[]
  followedBy Follows[] @relation("following")
  following  Follows[] @relation("follower")

  @@map("users")
}

model Post {
  id         Int      @id @unique @default(autoincrement())
  users      User     @relation(fields: [userId], references: [id])
  title      String   @db.VarChar(255)
  text       String   @db.VarChar(1500)
  image      String?  @db.VarChar(255)
  points     Int      @default(0)
  voteStatus Int?
  userId     Int      @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  updoots    Updoot[]
  images     Image[]

  @@index([createdAt(sort: Desc)])
  @@map("posts")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int
  status      Status   @default(WAITING)
  date        DateTime @default(now())

  @@id([followerId, followingId])
  @@map("follows")
}

model Updoot {
  id     Int  @id @unique @default(autoincrement())
  posts  Post @relation(fields: [postId], references: [id])
  users  User @relation(fields: [userId], references: [id])
  value  Int
  userId Int  @map("user_id")
  postId Int  @map("post_id")

  @@map("updoots")
}

model Image {
  id     Int  @id @unique @default(autoincrement())
  posts  Post @relation(fields: [postId], references: [id])
  url    String   @db.VarChar()
  public_id  String   @db.VarChar()
  postId Int  @map("post_id")

  @@map("images")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Status {
  PENDING
  FULFILLED
  REJECTED
  WAITING
}